rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Public read-only collections
    match /restaurants/{restId} {
      allow create, read, update, delete: if true;
    }

    match /tables/{tableId} {
      allow read: if true;
    }

    match /categories/{menuId} {
      allow read: if true;
    }

    match /dishes/{dishId} {
      allow read: if true;
    }

    match /translations/{document=**} {
      allow read: if true;
    }

    // Orders: anonymous users can create, not modify others
    match /orders/{orderId} {
      allow create: if true;
      allow read: if true; // if request.auth != null;
      allow update, delete: if true; // if request.auth != null;
    }

    // Calls: same logic
    match /calls/{callId} {
      allow create, read, update: if true;
      // allow read: if request.auth != null;
      // allow update: if request.auth != null;
    }

    // Users: only authenticated staff can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // This rule allows anyone with your Firestore database reference to view, edit,
    // and delete all data in your Firestore database. It is useful for getting
    // started, but it is configured to expire after 30 days because it
    // leaves your app open to attackers. At that time, all client
    // requests to your Firestore database will be denied.
    //
    // Make sure to write security rules for your app before that time, or else
    // all client requests to your Firestore database will be denied until you Update
    // your rules
    match /{document=**} {
      allow read, write, delete: if true; // request.time < timestamp.date(2025, 6, 29);
    }
  }
}